/*
    Generated by Atomist on 13 07 2016 
*/
package demo;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.SpringApplicationConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;

import static org.junit.Assert.assertEquals;

//This could be implemented as a unit test, but am demonstrating the ParentalCheckerService actually running,
// for confidence with the Controller level testing.
@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = MoviesApplication.class)
@WebAppConfiguration
public class ParentalCheckerServiceTests {

	@Autowired
	ParentalCheckerService parentalCheckerService;

	@Test(expected = TitleNotFoundException.class)
	public void checkNullAndEmplyIsDisallowed() throws Exception {
		parentalCheckerService.checkMovieById(null);
		parentalCheckerService.checkMovieById("");
	}

	@Test
	public void onlyU_IsAllowed() throws Exception {
		parentalCheckerService.setLevel(ParentalControlLevels.LEVEL_U);
		expectNotAllowedException("boysFromBrazil");
		expectNotAllowedException("predator");
		expectNotAllowedException("theTwoRonnies");
		expectNotAllowedException("skyfall");
		parentalCheckerService.checkMovieById("bugsBunny");
	}

	@Test
	public void only12_IsAllowed() throws Exception {
		parentalCheckerService.setLevel(ParentalControlLevels.LEVEL_12);

		expectNotAllowedException("boysFromBrazil");
		expectNotAllowedException("predator");
		expectNotAllowedException("theTwoRonnies");
		parentalCheckerService.checkMovieById("skyfall");
		parentalCheckerService.checkMovieById("bugsBunny");

	}

	@Test
	public void onlyPG_IsAllowed() throws Exception {
		parentalCheckerService.setLevel(ParentalControlLevels.LEVEL_PG);

		expectNotAllowedException("boysFromBrazil");
		expectNotAllowedException("predator");
		parentalCheckerService.checkMovieById("theTwoRonnies");
		parentalCheckerService.checkMovieById("skyfall");
		parentalCheckerService.checkMovieById("bugsBunny");
	}

	private void expectNotAllowedException(String movieId) throws TitleNotFoundException, TechnicalFailureException{
		try{
			parentalCheckerService.checkMovieById(movieId);
		}catch(NotAllowedException e){
			//ignore;
		}
	}

	@Test
	public void only15_IsAllowed() throws Exception {
		parentalCheckerService.setLevel(ParentalControlLevels.LEVEL_15);

		expectNotAllowedException("boysFromBrazil");
		parentalCheckerService.checkMovieById("predator");
		parentalCheckerService.checkMovieById("theTwoRonnies");
		parentalCheckerService.checkMovieById("skyfall");
		parentalCheckerService.checkMovieById("bugsBunny");
	}

	@Test
	public void only18_IsAllowed() throws Exception {
		parentalCheckerService.setLevel(ParentalControlLevels.LEVEL_18);
		parentalCheckerService.checkMovieById("boysFromBrazil");
		parentalCheckerService.checkMovieById("predator");
		parentalCheckerService.checkMovieById("theTwoRonnies");
		parentalCheckerService.checkMovieById("skyfall");
		parentalCheckerService.checkMovieById("bugsBunny");
	}




}
